/**
 * License Generator tests
 */

import { AssetDatabase } from '@/assets/validation/AssetDatabase';
import { LicenseGenerator } from '@/assets/validation/LicenseGenerator';

describe('LicenseGenerator', () => {
  let database: AssetDatabase;
  let generator: LicenseGenerator;

  beforeEach(() => {
    database = new AssetDatabase();
    generator = new LicenseGenerator(database);
  });

  describe('Initialization', () => {
    it('should create generator instance', () => {
      expect(generator).toBeDefined();
    });

    it('should accept database in constructor', () => {
      const customDB = new AssetDatabase();
      const customGenerator = new LicenseGenerator(customDB);
      expect(customGenerator).toBeDefined();
    });
  });

  describe('generateLicensesFile', () => {
    it('should generate valid markdown', async () => {
      const content = await generator.generateLicensesFile();

      expect(content).toBeDefined();
      expect(typeof content).toBe('string');
      expect(content.length).toBeGreaterThan(0);
    });

    it('should include header', async () => {
      const content = await generator.generateLicensesFile();

      expect(content).toContain('# Third-Party Asset Licenses');
      expect(content).toContain('Edge Craft');
    });

    it('should include table of contents', async () => {
      const content = await generator.generateLicensesFile();

      expect(content).toContain('## Table of Contents');
    });

    it('should include license sections', async () => {
      const content = await generator.generateLicensesFile();

      // Should have at least one license section
      // License sections have headers like "## Creative Commons Zero" or "## MIT License"
      expect(content).toMatch(/## (Creative Commons Zero|MIT License|Apache License|BSD.*License)/);
    });

    it('should include asset listings', async () => {
      const content = await generator.generateLicensesFile();

      // Should list at least one asset
      expect(content).toContain('assets/');
    });

    it('should include footer', async () => {
      const content = await generator.generateLicensesFile();

      expect(content).toContain('## Verification');
      expect(content).toContain('Generated by Edge Craft');
    });

    it('should group assets by license', async () => {
      const content = await generator.generateLicensesFile();

      // Check for multiple license sections
      const cc0Match = content.match(/CC0/g);
      const mitMatch = content.match(/MIT/g);

      expect(cc0Match !== null || mitMatch !== null).toBe(true);
    });

    it('should include asset metadata', async () => {
      const content = await generator.generateLicensesFile();

      // Should include source URLs
      expect(content).toMatch(/https?:\/\//);

      // Should include license info (with markdown bold)
      expect(content).toMatch(/\*\*License\*\*:/);
    });
  });

  describe('generateAssetAttribution', () => {
    it('should generate attribution for single asset', () => {
      const mappings = database.getAllMappings();
      const mapping = mappings[0];

      if (mapping !== undefined) {
        const attribution = generator.generateAssetAttribution(mapping);

        expect(attribution).toBeDefined();
        expect(attribution).toContain(mapping.original.name);
        expect(attribution).toContain(mapping.replacement.path);
        expect(attribution).toContain(mapping.replacement.license);
        expect(attribution).toContain(mapping.replacement.source);
      }
    });

    it('should include author if present', () => {
      const mappings = database.getAllMappings();
      const withAuthor = mappings.find(m => m.replacement.author !== undefined);

      if (withAuthor !== undefined) {
        const attribution = generator.generateAssetAttribution(withAuthor);
        expect(attribution).toContain('Author:');
      }
    });

    it('should include notes if present', () => {
      const mappings = database.getAllMappings();
      const withNotes = mappings.find(m => m.replacement.notes !== undefined);

      if (withNotes !== undefined) {
        const attribution = generator.generateAssetAttribution(withNotes);
        expect(attribution).toContain('Notes:');
      }
    });
  });

  describe('validateAttributions', () => {
    it('should validate default database', () => {
      const result = generator.validateAttributions();

      expect(result).toHaveProperty('valid');
      expect(result).toHaveProperty('errors');
      expect(typeof result.valid).toBe('boolean');
      expect(Array.isArray(result.errors)).toBe(true);
    });

    it('should pass for complete attributions', () => {
      const result = generator.validateAttributions();

      // Default database should have valid attributions
      expect(result.valid).toBe(true);
      expect(result.errors).toHaveLength(0);
    });

    it('should detect missing author for MIT assets', () => {
      // Add asset with MIT license but no author
      database.addMapping({
        id: 'test-missing-author',
        type: 'model',
        original: {
          hash: 'test123',
          name: 'TestAsset',
          game: 'wc3'
        },
        replacement: {
          path: 'assets/test.gltf',
          license: 'MIT',
          source: 'https://test.com'
          // Missing author - MIT requires attribution
        },
        verified: true,
        dateAdded: '2025-01-01'
      });

      const result = generator.validateAttributions();

      expect(result.valid).toBe(false);
      expect(result.errors.length).toBeGreaterThan(0);
      expect(result.errors.some(e => e.includes('author'))).toBe(true);
    });

    it('should detect missing source', () => {
      // Add asset with missing source
      database.addMapping({
        id: 'test-missing-source',
        type: 'model',
        original: {
          hash: 'test456',
          name: 'TestAsset2',
          game: 'wc3'
        },
        replacement: {
          path: 'assets/test2.gltf',
          license: 'Apache-2.0',
          source: '', // Empty source
          author: 'Test Author'
        },
        verified: true,
        dateAdded: '2025-01-01'
      });

      const result = generator.validateAttributions();

      expect(result.valid).toBe(false);
      expect(result.errors.some(e => e.includes('source'))).toBe(true);
    });

    it('should allow CC0 without attribution', () => {
      // CC0 doesn't require attribution
      database.addMapping({
        id: 'test-cc0',
        type: 'texture',
        original: {
          hash: 'test789',
          name: 'TestTexture',
          game: 'sc1'
        },
        replacement: {
          path: 'assets/texture.png',
          license: 'CC0',
          source: 'https://test.com'
          // No author needed for CC0
        },
        verified: true,
        dateAdded: '2025-01-01'
      });

      const result = generator.validateAttributions();

      // Should still be valid (or have other errors, but not about this asset)
      expect(result.errors.every(e => !e.includes('TestTexture'))).toBe(true);
    });
  });

  describe('License templates', () => {
    it('should support CC0 license', async () => {
      const content = await generator.generateLicensesFile();

      if (content.includes('CC0')) {
        expect(content).toContain('Public Domain');
        expect(content).toContain('creativecommons.org');
      }
    });

    it('should support MIT license', async () => {
      const content = await generator.generateLicensesFile();

      // Check if there's actually a MIT license section (not just mentioned in overview)
      if (content.includes('## MIT License')) {
        expect(content).toContain('MIT');
        expect(content.toLowerCase()).toMatch(/opensource\.org/);
      } else {
        // If no MIT assets, just verify format is correct
        expect(content).toContain('License Compliance');
      }
    });

    it('should support Apache license', async () => {
      const content = await generator.generateLicensesFile();

      // Apache license might not be in default database, so only check if present
      if (content.includes('Apache License')) {
        expect(content).toContain('Apache');
        // Note: URL might be www.apache.org or apache.org
        expect(content.toLowerCase()).toMatch(/apache\.org/);
      } else {
        // If no Apache assets, just verify format is correct
        expect(content).toContain('License Compliance');
      }
    });

    it('should indicate attribution requirements', async () => {
      const content = await generator.generateLicensesFile();

      expect(content).toMatch(/\*\*Attribution Required\*\*: (Yes|No)/);
    });

    it('should indicate commercial use', async () => {
      const content = await generator.generateLicensesFile();

      expect(content).toMatch(/\*\*Commercial Use\*\*: (Allowed|Restricted)/);
    });
  });

  describe('Asset grouping', () => {
    it('should group by license type', async () => {
      const content = await generator.generateLicensesFile();

      // Count license sections
      const sections = content.match(/^## [A-Z]/gm);
      expect(sections).not.toBeNull();
      if (sections !== null) {
        expect(sections.length).toBeGreaterThan(0);
      }
    });

    it('should group assets by type within license', async () => {
      const content = await generator.generateLicensesFile();

      // Should have type headers like "#### Models"
      const typeHeaders = content.match(/#### \w+s\n/g);
      expect(typeHeaders).not.toBeNull();
    });

    it('should sort assets appropriately', async () => {
      const content = await generator.generateLicensesFile();

      // Check that paths are listed
      expect(content).toMatch(/assets\/\w+/);
    });
  });
});
